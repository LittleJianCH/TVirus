data Expr = Zero() | One() | Plus(Expr, Expr) | Mult(Expr, Expr) | Two()

let simpl = \e. match e with
| Plus(Zero(), x) -> simpl(x)
| Plus(x, Zero()) -> simpl(x)
| Mult(Zero(), _) -> Zero()
| Mult(_, Zero()) -> Zero()
| Mult(One(), x) -> simpl(x)
| Mult(x, One()) -> simpl(x)
| Plus(l, r) -> Plus(simpl(l), simpl(r))
| Mult(l, r) -> Mult(simpl(l), simpl(r))
| x -> x

let and = \b1, b2. match P(b1, b2) with
| P(True, True) -> True
| _ -> False()

let equal = \e1, e2. match P(e1, e2) with
| P(Zero(), Zero()) -> True
| P(One(), One()) -> True
| P(Plus(l1, r1), Plus(l2, r2)) -> and(equal(l1, l2), equal(r1, r2))
| P(Mult(l1, r1), Mult(l2, r2)) -> and(equal(l1, l2), equal(r1, r2))
| P(Two(), Two()) -> True
| _ -> False

let main = equal(
    simpl(Plus(Two(), Mult(One(), Zero()))),
    Plus(Two(), Zero()))