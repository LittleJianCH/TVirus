data List a = Nil() | Cons(a, List a)

data Pair a b = MkPair(a, b)

let map = \f, l. match l with
    | Nil() -> Nil()
    | Cons(x, xs) -> Cons(f(x), map(f, xs))

let reverseAppend = \l1, l2. match l1 with
    | Nil() -> l2
    | Cons(a, l) -> reverseAppend(l, Cons(a, l2))

let reverse = \l. reverseAppend(l, Nil())

let zipWith = \f, a, b. match MkPair(a, b) with
| MkPair(Nil(), Nil()) -> Nil()
| MkPair(Cons(ah, at), Cons(bh, bt)) -> Cons(f(ah, bh), zipWith(f, at, bt))

let main = let x = Cons(1, Nil()), y = reverse(x), z = map((\i. (i + 1)), y) in zipWith((\a, b. (a + b)), x, z)